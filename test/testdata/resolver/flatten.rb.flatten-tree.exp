begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        begin
          ::<Magic>.<define-top-class-or-module>(::A)
          ::Sorbet::Private::Static.keep_for_ide(::A)
          <emptyTree>
        end
        ::A.new().foo()
        ::A.foo()
        ::A.new().food()
        ::A.food()
        ::A.new().foos()
        ::A.foos()
        ::A.sfoo()
        ::A.new().sfoo()
        ::A.new().sfood()
        ::A.sfood()
        ::A.sfoos()
        ::A.new().sfoos()
        <emptyTree>
      end
    end
  end
  class ::A<<C A>> < (::<todo sym>)
    def foo(<blk>)
      begin
        ::Sorbet::Private::Static.keep_def(<self>, :food)
        ::Sorbet::Private::Static.keep_self_def(<self>, :foos)
      end
    end

    def food(<blk>)
      <emptyTree>
    end

    def foos(<blk>)
      <emptyTree>
    end

    def self.sfoo(<blk>)
      begin
        ::Sorbet::Private::Static.keep_def(<self>, :sfood)
        ::Sorbet::Private::Static.keep_self_def(<self>, :sfoos)
      end
    end

    def sfood(<blk>)
      <emptyTree>
    end

    def self.sfoos(<blk>)
      <emptyTree>
    end

    def self.<static-init>(<blk>)
      begin
        ::Sorbet::Private::Static.keep_def(<self>, :foo)
        ::Sorbet::Private::Static.keep_self_def(<self>, :sfoo)
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
