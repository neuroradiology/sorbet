digraph "hashes.rb" {
subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$5: T.class_of(<Magic>) = alias <C <Magic>>\l<cfgAlias>$7: T.class_of(Foo) = alias <C Foo>\l<statTemp>$3: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(<Magic>).<define-top-class-or-module>(<cfgAlias>$7: T.class_of(Foo))\l<cfgAlias>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<cfgAlias>$12: T.class_of(Foo) = alias <C Foo>\l<statTemp>$8: Sorbet::Private::Static::Void = <cfgAlias>$10: T.class_of(Sorbet::Private::Static).keep_for_ide(<cfgAlias>$12: T.class_of(Foo))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

subgraph "cluster_::Foo#bar" {
    label = "::Foo#bar";
    color = blue;
    "bb::Foo#bar_0" [shape = invhouse];
    "bb::Foo#bar_1" [shape = parallelogram];

    "bb::Foo#bar_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: Foo = cast(<self>: NilClass, Foo);\lcond: T.untyped = load_arg(cond)\lcond: T.untyped\l"
    ];

    "bb::Foo#bar_0" -> "bb::Foo#bar_2" [style="bold"];
    "bb::Foo#bar_0" -> "bb::Foo#bar_3" [style="tapered"];

    "bb::Foo#bar_1" [
        label = "block[id=1, rubyBlockId=0](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::Foo#bar_1" -> "bb::Foo#bar_1" [style="bold"];
    "bb::Foo#bar_2" [
        label = "block[id=2, rubyBlockId=0]()\l<magic>$5: T.class_of(<Magic>) = alias <C <Magic>>\ls: {} = <magic>$5: T.class_of(<Magic>).<build-hash>()\l<unconditional>\l"
    ];

    "bb::Foo#bar_2" -> "bb::Foo#bar_4" [style="bold"];
    "bb::Foo#bar_3" [
        label = "block[id=3, rubyBlockId=0]()\l<magic>$6: T.class_of(<Magic>) = alias <C <Magic>>\ls: {} = <magic>$6: T.class_of(<Magic>).<build-hash>()\l<unconditional>\l"
    ];

    "bb::Foo#bar_3" -> "bb::Foo#bar_4" [style="bold"];
    "bb::Foo#bar_4" [
        label = "block[id=4, rubyBlockId=0](s: {})\lr: {} = s\l<returnMethodTemp>$2: T.noreturn = return r: {}\l<unconditional>\l"
    ];

    "bb::Foo#bar_4" -> "bb::Foo#bar_1" [style="bold"];
}

subgraph "cluster_::<Class:Foo>#<static-init>" {
    label = "::<Class:Foo>#<static-init>";
    color = blue;
    "bb::<Class:Foo>#<static-init>_0" [shape = invhouse];
    "bb::<Class:Foo>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:Foo>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(Foo) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U Foo>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U Foo>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$4: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$6: Symbol(:bar) = :bar\l<returnMethodTemp>$2: Symbol(:bar) = <cfgAlias>$4: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(Foo), <statTemp>$6: Symbol(:bar))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:bar)\l<unconditional>\l"
    ];

    "bb::<Class:Foo>#<static-init>_0" -> "bb::<Class:Foo>#<static-init>_1" [style="bold"];
    "bb::<Class:Foo>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:Foo>#<static-init>_1" -> "bb::<Class:Foo>#<static-init>_1" [style="bold"];
}

}

