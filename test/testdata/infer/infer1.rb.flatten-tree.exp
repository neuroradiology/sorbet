begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def baz1(<blk>)
      begin
        a = "foo"
        b = a.getbyte(a)
      end
    end

    def baz2(<blk>)
      begin
        a = "foo"
        b = a.getbyte("foo")
      end
    end

    def baz3(<blk>)
      b = "foo".getbyte("foo")
    end

    def baz4(<blk>)
      b = <self>.a().getbyte("foo")
    end

    def baz5(cond, <blk>)
      begin
        if cond
          b = 1
        else
          b = "foo"
        end
        b = b.getbyte(1)
      end
    end

    def baz6(cond, <blk>)
      begin
        if cond
          b = 1
        else
          b = "foo"
        end
        b = "foo".getbyte(b)
      end
    end

    def baz7(cond, <blk>)
      begin
        if cond
          b = 1
        else
          <emptyTree>
        end
        b = "foo".getbyte(b)
      end
    end

    def baz8(<blk>)
      while true
        b = 1
      end
    end

    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        ::Sorbet::Private::Static.keep_def(<self>, :baz1)
        ::Sorbet::Private::Static.keep_def(<self>, :baz2)
        ::Sorbet::Private::Static.keep_def(<self>, :baz3)
        ::Sorbet::Private::Static.keep_def(<self>, :baz4)
        ::Sorbet::Private::Static.keep_def(<self>, :baz5)
        ::Sorbet::Private::Static.keep_def(<self>, :baz6)
        ::Sorbet::Private::Static.keep_def(<self>, :baz7)
        ::Sorbet::Private::Static.keep_def(<self>, :baz8)
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
