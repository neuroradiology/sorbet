digraph "rescue.rb" {
subgraph "cluster_::Object#main" {
    label = "::Object#main";
    color = blue;
    "bb::Object#main_0" [shape = invhouse];
    "bb::Object#main_1" [shape = parallelogram];

    "bb::Object#main_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\l<magic>$6: T.class_of(<Magic>) = alias <C <Magic>>\l<exceptionValue>$3: T.untyped = <get-current-exception>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::Object#main_0" -> "bb::Object#main_3" [style="bold"];
    "bb::Object#main_0" -> "bb::Object#main_4" [style="tapered"];

    "bb::Object#main_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#main_1" -> "bb::Object#main_1" [style="bold"];
    "bb::Object#main_3" [
        label = "block[id=3, rubyBlockId=2](<self>: Object, <returnMethodTemp>$2: T.untyped, <exceptionValue>$3: T.untyped, <magic>$6: T.class_of(<Magic>))\l<cfgAlias>$9: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$10: T.untyped = <exceptionValue>$3: T.untyped.is_a?(<cfgAlias>$9: T.class_of(StandardError))\l<isaCheckTemp>$10: T.untyped\l"
    ];

    "bb::Object#main_3" -> "bb::Object#main_7" [style="bold"];
    "bb::Object#main_3" -> "bb::Object#main_8" [style="tapered"];

    "bb::Object#main_4" [
        label = "block[id=4, rubyBlockId=1](<self>: Object, <magic>$6: T.class_of(<Magic>))\l<returnMethodTemp>$2: T.untyped = <self>: Object.a()\l<exceptionValue>$3: T.untyped = <get-current-exception>\l<exceptionValue>$3: T.untyped\l"
    ];

    "bb::Object#main_4" -> "bb::Object#main_3" [style="bold"];
    "bb::Object#main_4" -> "bb::Object#main_5" [style="tapered"];

    "bb::Object#main_5" [
        label = "block[id=5, rubyBlockId=4](<self>: Object)\l<returnMethodTemp>$2: T.untyped = <self>: Object.c()\l<unconditional>\l"
    ];

    "bb::Object#main_5" -> "bb::Object#main_6" [style="bold"];
    "bb::Object#main_6" [
        label = "block[id=6, rubyBlockId=3](<self>: Object, <returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$12: T.nilable(TrueClass))\l<throwAwayTemp>$13: T.untyped = <self>: Object.d()\l<gotoDeadTemp>$12: T.nilable(TrueClass)\l"
    ];

    "bb::Object#main_6" -> "bb::Object#main_1" [style="bold"];
    "bb::Object#main_6" -> "bb::Object#main_9" [style="tapered"];

    "bb::Object#main_7" [
        label = "block[id=7, rubyBlockId=2](<self>: Object, <magic>$6: T.class_of(<Magic>))\l<exceptionValue>$3: NilClass = nil\l<keepForCfgTemp>$7: Sorbet::Private::Static::Void = <magic>$6: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$3: NilClass)\l<returnMethodTemp>$2: T.untyped = <self>: Object.b()\l<unconditional>\l"
    ];

    "bb::Object#main_7" -> "bb::Object#main_6" [style="bold"];
    "bb::Object#main_8" [
        label = "block[id=8, rubyBlockId=2](<self>: Object, <returnMethodTemp>$2: T.untyped)\l<gotoDeadTemp>$12: TrueClass = true\l<unconditional>\l"
    ];

    "bb::Object#main_8" -> "bb::Object#main_6" [style="bold"];
    "bb::Object#main_9" [
        label = "block[id=9, rubyBlockId=0](<returnMethodTemp>$2: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Object#main_9" -> "bb::Object#main_1" [style="bold"];
}

subgraph "cluster_::Object#a" {
    label = "::Object#a";
    color = blue;
    "bb::Object#a_0" [shape = invhouse];
    "bb::Object#a_1" [shape = parallelogram];

    "bb::Object#a_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Object#a_0" -> "bb::Object#a_1" [style="bold"];
    "bb::Object#a_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#a_1" -> "bb::Object#a_1" [style="bold"];
}

subgraph "cluster_::Object#b" {
    label = "::Object#b";
    color = blue;
    "bb::Object#b_0" [shape = invhouse];
    "bb::Object#b_1" [shape = parallelogram];

    "bb::Object#b_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Object#b_0" -> "bb::Object#b_1" [style="bold"];
    "bb::Object#b_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#b_1" -> "bb::Object#b_1" [style="bold"];
}

subgraph "cluster_::Object#c" {
    label = "::Object#c";
    color = blue;
    "bb::Object#c_0" [shape = invhouse];
    "bb::Object#c_1" [shape = parallelogram];

    "bb::Object#c_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Object#c_0" -> "bb::Object#c_1" [style="bold"];
    "bb::Object#c_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#c_1" -> "bb::Object#c_1" [style="bold"];
}

subgraph "cluster_::Object#d" {
    label = "::Object#d";
    color = blue;
    "bb::Object#d_0" [shape = invhouse];
    "bb::Object#d_1" [shape = parallelogram];

    "bb::Object#d_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: Object = cast(<self>: NilClass, Object);\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Object#d_0" -> "bb::Object#d_1" [style="bold"];
    "bb::Object#d_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::Object#d_1" -> "bb::Object#d_1" [style="bold"];
}

subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0, rubyBlockId=0]()\l<self>: T.class_of(<root>) = cast(<self>: NilClass, AppliedType {\l  klass = <S <C <U <root>>> $1>\l  targs = [\l    <C <U <AttachedClass>>> = SelfTypeParam(<S <C <U <root>>> $1><C <U <AttachedClass>>>)\l  ]\l});\l<cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$7: Symbol(:main) = :main\l<statTemp>$3: Symbol(:main) = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$7: Symbol(:main))\l<cfgAlias>$10: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$12: Symbol(:a) = :a\l<statTemp>$8: Symbol(:a) = <cfgAlias>$10: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$12: Symbol(:a))\l<cfgAlias>$15: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$17: Symbol(:b) = :b\l<statTemp>$13: Symbol(:b) = <cfgAlias>$15: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$17: Symbol(:b))\l<cfgAlias>$20: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$22: Symbol(:c) = :c\l<statTemp>$18: Symbol(:c) = <cfgAlias>$20: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$22: Symbol(:c))\l<cfgAlias>$25: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$27: Symbol(:d) = :d\l<statTemp>$23: Symbol(:d) = <cfgAlias>$25: T.class_of(Sorbet::Private::Static).keep_def(<self>: T.class_of(<root>), <statTemp>$27: Symbol(:d))\l<statTemp>$30: T.untyped = <self>: T.class_of(<root>).foo()\l<statTemp>$28: NilClass = <self>: T.class_of(<root>).puts(<statTemp>$30: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1, rubyBlockId=0]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

}

