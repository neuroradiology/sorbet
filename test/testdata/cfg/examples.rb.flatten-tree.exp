begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        ::<Magic>.<define-top-class-or-module>(::Examples)
        ::Sorbet::Private::Static.keep_for_ide(::Examples)
        <emptyTree>
      end
    end
  end
  class ::Examples<<C Examples>> < (::<todo sym>)
    def i_like_ifs(<blk>)
      if true
        return 1
      else
        return 2
      end
    end

    def i_like_exps(<blk>)
      if true
        1
      else
        2
      end
    end

    def return_in_one_branch1(<blk>)
      if true
        return 1
      else
        2
      end
    end

    def return_in_one_branch2(<blk>)
      if true
        1
      else
        return 2
      end
    end

    def variables(<blk>)
      begin
        if true
          a = 1
        else
          a = 2
        end
        if false
          b = 1
        else
          b = 2
        end
        a.+(b)
      end
    end

    def variables_and_loop(cond, <blk>)
      begin
        if true
          a = 1
        else
          a = 2
        end
        while true
          if cond
            b = 1
          else
            b = 2
          end
        end
        b
      end
    end

    def variables_loop_if(cond, <blk>)
      begin
        while true
          if cond
            b = 1
          else
            b = 2
          end
        end
        b
      end
    end

    def take_arguments(i, <blk>)
      if false
        2
      else
        i
      end
    end

    def self.<static-init>(<blk>)
      begin
        ::Sorbet::Private::Static.keep_def(<self>, :i_like_ifs)
        ::Sorbet::Private::Static.keep_def(<self>, :i_like_exps)
        ::Sorbet::Private::Static.keep_def(<self>, :return_in_one_branch1)
        ::Sorbet::Private::Static.keep_def(<self>, :return_in_one_branch2)
        ::Sorbet::Private::Static.keep_def(<self>, :variables)
        ::Sorbet::Private::Static.keep_def(<self>, :variables_and_loop)
        ::Sorbet::Private::Static.keep_def(<self>, :variables_loop_if)
        ::Sorbet::Private::Static.keep_def(<self>, :take_arguments)
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
