begin
  <emptyTree>
  class <emptyTree><<C <root>>> < (::<todo sym>)
    def self.<static-init><<static-init>$CENSORED>(<blk>)
      begin
        begin
          ::<Magic>.<define-top-class-or-module>(::A)
          ::Sorbet::Private::Static.keep_for_ide(::A)
          <emptyTree>
        end
        begin
          ::<Magic>.<define-top-class-or-module>(::C)
          ::Sorbet::Private::Static.keep_for_ide(::C)
          <emptyTree>
        end
        <emptyTree>
      end
    end
  end
  module ::A<<C A>> < ()
    def self.<static-init>(<blk>)
      begin
        ::<Magic>.<define-top-class-or-module>(::A::B)
        ::Sorbet::Private::Static.keep_for_ide(::A::B)
        <emptyTree>
      end
    end
  end
  class ::A::B<<C B>> < (::<todo sym>)
    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  class ::C<<C C>> < (::<todo sym>)
    def self.<static-init>(<blk>)
      <emptyTree>
    end
  end
  <emptyTree>
end
