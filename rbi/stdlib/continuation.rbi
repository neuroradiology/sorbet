# typed: __STDLIB_INTERNAL

# [`Continuation`](https://docs.ruby-lang.org/en/2.6.0/Continuation.html)
# objects are generated by
# [`Kernel#callcc`](https://docs.ruby-lang.org/en/2.6.0/Kernel.html#method-i-callcc),
# after having +require+d *continuation*. They hold a return address and
# execution context, allowing a nonlocal return to the end of the `callcc` block
# from anywhere within a program. Continuations are somewhat analogous to a
# structured version of C's `setjmp/longjmp` (although they contain more state,
# so you might consider them closer to threads).
#
# For instance:
#
# ```ruby
# require "continuation"
# arr = [ "Freddie", "Herbie", "Ron", "Max", "Ringo" ]
# callcc{|cc| $cc = cc}
# puts(message = arr.shift)
# $cc.call unless message =~ /Max/
# ```
#
# *produces:*
#
# ```ruby
# Freddie
# Herbie
# Ron
# Max
# ```
#
# Also you can call callcc in other methods:
#
# ```ruby
# require "continuation"
#
# def g
#   arr = [ "Freddie", "Herbie", "Ron", "Max", "Ringo" ]
#   cc = callcc { |cc| cc }
#   puts arr.shift
#   return cc, arr.size
# end
#
# def f
#   c, size = g
#   c.call(c) if size > 1
# end
#
# f
# ```
#
# This (somewhat contrived) example allows the inner loop to abandon processing
# early:
#
# ```ruby
# require "continuation"
# callcc {|cont|
#   for i in 0..4
#     print "\n#{i}: "
#     for j in i*5...(i+1)*5
#       cont.call() if j == 17
#       printf "%3d", j
#     end
#   end
# }
# puts
# ```
#
# *produces:*
#
# ```
# 0:   0  1  2  3  4
# 1:   5  6  7  8  9
# 2:  10 11 12 13 14
# 3:  15 16
# ```
class Continuation
  # Invokes the continuation. The program continues from the end of the `callcc`
  # block. If no arguments are given, the original `callcc` returns `nil`. If
  # one argument is given, `callcc` returns it. Otherwise, an array containing
  # *args* is returned.
  #
  # ```ruby
  # callcc {|cont|  cont.call }           #=> nil
  # callcc {|cont|  cont.call 1 }         #=> 1
  # callcc {|cont|  cont.call 1, 2, 3 }   #=> [1, 2, 3]
  # ```
  sig { params(args: T.untyped).returns(T.untyped) }
  def [](*args); end

  # Invokes the continuation. The program continues from the end of the `callcc`
  # block. If no arguments are given, the original `callcc` returns `nil`. If
  # one argument is given, `callcc` returns it. Otherwise, an array containing
  # *args* is returned.
  #
  # ```ruby
  # callcc {|cont|  cont.call }           #=> nil
  # callcc {|cont|  cont.call 1 }         #=> 1
  # callcc {|cont|  cont.call 1, 2, 3 }   #=> [1, 2, 3]
  # ```
  sig { params(args: T.untyped).returns(T.untyped) }
  def call(*args); end
end
